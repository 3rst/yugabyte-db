#!/usr/bin/env perl -n -pi

our $prevn;
our $previd;
our %seen;

BEGIN {
    $prevn = 0;
    $previd = '';
    print STDERR "<h1>Contents</h1>\n<ul>\n";
}

if (m{
    <h([123])\s+id="                           # 1. hn
    (?:
        L[.]code[.+]([^.]+)(?:[^"]+)           # 2. funcname
        | ([^"]+)                              # 3. id
    )
    ">
    (                                          # 4. header
        (<code>[^(]+)?.+?                      # 5. label
    )
    </h\1>
}x) {
    # Clean up the ID a bit.
    my ($hn, $func, $id, $val, $label) = ($1, $2, $3, $4, $5);
    $id = $func || $id;
    if ($id) {
        $id =~ s{L?[.]code[.]}{}g;
        $id =~ s{[.]{2,}}{.}g;
    }
    if ($previd ne $id) {
        $previd = $id;
        if ($prevn) {
            if ($hn != $prevn) {
                print STDERR $hn > $prevn
                    ? $hn - $prevn > 1
                    ? "<ul><li><ul>" : "<ul>\n" : $prevn - $hn > 1
                    ? "</li></ul></li></ul></li>\n" : "</li></ul></li>\n";
                $prevn = $hn;
            } else {
                print STDERR "</li>\n"
            }
        } else {
            $prevn = $hn;
        }
        print STDERR qq{<li><a href="#} . ($func || $id) . q{">} . ($5 ? "$5()</code>" : $val) . "</a>";
    }

    $_ = qq{<h$hn id="$id} . ($seen{$id}++ || '')  . qq{">$val</h$hn>\n};
}

END { print STDERR "</li>\n</ul>\n" }
