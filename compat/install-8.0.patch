--- pgtap.sql.orig	2008-10-10 20:36:09.000000000 -0700
+++ pgtap.sql	2008-10-10 20:36:09.000000000 -0700
@@ -12,6 +12,14 @@
 -- ## CREATE SCHEMA TAPSCHEMA;
 -- ## SET search_path TO TAPSCHEMA,public;
 
+-- Cast oidvector to regtype[] like 8.1 does.
+CREATE OR REPLACE FUNCTION oidvregtype(oidvector)
+RETURNS regtype[] AS
+'SELECT COALESCE(string_to_array(textin(oidvectorout($1::oidvector)), '' '')::oid[]::regtype[], ''{}''::regtype[]);'
+LANGUAGE sql IMMUTABLE STRICT;
+
+CREATE CAST (oidvector AS regtype[]) WITH FUNCTION oidvregtype(oidvector) AS ASSIGNMENT;
+
 CREATE OR REPLACE FUNCTION pg_typeof("any")
 RETURNS regtype
 AS '$libdir/pgtap'
@@ -74,53 +82,63 @@
 CREATE OR REPLACE FUNCTION _get ( text )
 RETURNS integer AS $$
 DECLARE
-    ret integer;
+    rec RECORD;
 BEGIN
-    EXECUTE 'SELECT value FROM __tcache__ WHERE label = ' || quote_literal($1) || ' LIMIT 1' INTO ret;
-    RETURN ret;
+    FOR rec IN EXECUTE 'SELECT value FROM __tcache__ WHERE label = ' || quote_literal($1) || ' LIMIT 1' LOOP
+        RETURN rec.value;
+    END LOOP;
+    RETURN NULL;
 END;
 $$ LANGUAGE plpgsql strict;
 
 CREATE OR REPLACE FUNCTION _get_latest ( text )
 RETURNS integer[] AS $$
 DECLARE
-    ret integer[];
+    rec RECORD;
 BEGIN
-    EXECUTE 'SELECT ARRAY[ id, value] FROM __tcache__ WHERE label = ' ||
+    FOR rec IN EXECUTE 'SELECT ARRAY[ id, value] AS a FROM __tcache__ WHERE label = ' ||
     quote_literal($1) || ' AND id = (SELECT MAX(id) FROM __tcache__ WHERE label = ' ||
-    quote_literal($1) || ') LIMIT 1' INTO ret;
-    RETURN ret;
+    quote_literal($1) || ') LIMIT 1' LOOP
+        RETURN rec.a;
+    END LOOP;
+    RETURN NULL;
 END;
 $$ LANGUAGE plpgsql strict;
 
 CREATE OR REPLACE FUNCTION _get_latest ( text, integer )
 RETURNS integer AS $$
 DECLARE
-    ret integer;
+    rec RECORD;
 BEGIN
-    EXECUTE 'SELECT MAX(id) FROM __tcache__ WHERE label = ' ||
-    quote_literal($1) || ' AND value = ' || $2 INTO ret;
-    RETURN ret;
+    FOR rec IN EXECUTE 'SELECT MAX(id) AS id FROM __tcache__ WHERE label = ' ||
+    quote_literal($1) || ' AND value = ' || $2 LOOP
+        RETURN rec.id;
+    END LOOP;
+    RETURN NULL;
 END;
 $$ LANGUAGE plpgsql strict;
 
 CREATE OR REPLACE FUNCTION _get_note ( text )
 RETURNS text AS $$
 DECLARE
-    ret text;
+    rec RECORD;
 BEGIN
-    EXECUTE 'SELECT note FROM __tcache__ WHERE label = ' || quote_literal($1) || ' LIMIT 1' INTO ret;
-    RETURN ret;
+    FOR rec IN EXECUTE 'SELECT note FROM __tcache__ WHERE label = ' || quote_literal($1) || ' LIMIT 1' LOOP
+        RETURN rec.note;
+    END LOOP;
+    RETURN NULL;
 END;
 $$ LANGUAGE plpgsql strict;
 
 CREATE OR REPLACE FUNCTION _get_note ( integer )
 RETURNS text AS $$
 DECLARE
-    ret text;
+    rec RECORD;
 BEGIN
-    EXECUTE 'SELECT note FROM __tcache__ WHERE id = ' || $1 || ' LIMIT 1' INTO ret;
-    RETURN ret;
+    FOR rec IN EXECUTE 'SELECT note FROM __tcache__ WHERE id = ' || $1 || ' LIMIT 1' LOOP
+        RETURN rec.note;
+    END LOOP;
+    RETURN NULL;
 END;
 $$ LANGUAGE plpgsql strict;
 
@@ -184,10 +202,12 @@
 CREATE OR REPLACE FUNCTION num_failed ()
 RETURNS INTEGER AS $$
 DECLARE
-    ret integer;
+    rec RECORD;
 BEGIN
-    EXECUTE 'SELECT COUNT(*)::INTEGER FROM __tresults__ WHERE ok = FALSE' INTO ret;
-    RETURN ret;
+    FOR rec IN EXECUTE 'SELECT COUNT(*)::INTEGER AS cnt FROM __tresults__ WHERE ok = FALSE' LOOP
+        RETURN rec.cnt;
+    END LOOP;
+    RETURN NULL;
 END;
 $$ LANGUAGE plpgsql strict;
 
@@ -453,13 +473,16 @@
     want   ALIAS FOR $3;
     descr  ALIAS FOR $4;
     result BOOLEAN;
+    rec    RECORD;
     output TEXT;
 BEGIN
-    EXECUTE 'SELECT ' ||
+    FOR rec IN EXECUTE 'SELECT ' ||
             COALESCE(quote_literal( have ), 'NULL') || '::' || pg_typeof(have) || ' '
             || op || ' ' ||
-            COALESCE(quote_literal( want ), 'NULL') || '::' || pg_typeof(want)
-       INTO result;
+            COALESCE(quote_literal( want ), 'NULL') || '::' || pg_typeof(want) || ' AS res'
+    LOOP
+        result := rec.res;
+    END LOOP;
     output := ok( COALESCE(result, FALSE), descr );
     RETURN output || CASE result WHEN TRUE THEN '' ELSE '\n' || diag(
            '    ' || COALESCE( quote_literal(have), 'NULL' ) ||
@@ -1018,15 +1041,16 @@
 CREATE OR REPLACE FUNCTION _def_is( TEXT, anyelement, TEXT )
 RETURNS TEXT AS $$
 DECLARE
-    thing text;
+    rec RECORD;
 BEGIN
     IF $1 ~ '^[^'']+[(]' THEN
         -- It's a functional default.
         RETURN is( $1, $2, $3 );
     END IF;
-    EXECUTE 'SELECT is(' || COALESCE($1, 'NULL::text') || ', ' || quote_literal($2) || ', ' || quote_literal($3) || ')'
-      INTO thing;
-    RETURN thing;
+    FOR rec IN EXECUTE 'SELECT is(' || COALESCE($1, 'NULL::text') || ', ' || quote_literal($2) || ', ' || quote_literal($3) || ')' || 'AS is' LOOP
+        RETURN rec.is;
+    END LOOP;
+    RETURN NULL;
 END;
 $$ LANGUAGE plpgsql;
 
@@ -1890,6 +1914,7 @@
     res    BOOLEAN;
     descr  TEXT;
     adiag  TEXT;
+    rec    RECORD;
     have   ALIAS FOR $1;
     eok    ALIAS FOR $2;
     name   ALIAS FOR $3;
@@ -1900,8 +1925,10 @@
     tnumb := currval('__tresults___numb_seq');
 
     -- Fetch the results.
-    EXECUTE 'SELECT aok, descr FROM __tresults__ WHERE numb = ' || tnumb
-       INTO aok, adescr;
+    FOR rec IN EXECUTE 'SELECT aok, descr FROM __tresults__ WHERE numb = ' || tnumb LOOP
+        aok := rec.aok;
+        adescr := rec.descr;
+    END LOOP;
 
     -- Now delete those results.
     EXECUTE 'DELETE FROM __tresults__ WHERE numb = ' || tnumb;
