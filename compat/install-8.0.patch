--- pgtap.sql.orig	2009-07-30 13:35:07.000000000 -0700
+++ pgtap.sql	2009-07-30 13:35:24.000000000 -0700
@@ -15,6 +15,27 @@
 RETURNS text AS 'SELECT current_setting(''server_version'')'
 LANGUAGE SQL IMMUTABLE;
 
+-- Cast oidvector to regtype[] like 8.1 does.
+CREATE OR REPLACE FUNCTION oidvregtype(oidvector)
+RETURNS regtype[] AS
+'SELECT COALESCE(string_to_array(textin(oidvectorout($1::oidvector)), '' '')::oid[]::regtype[], ''{}''::regtype[]);'
+LANGUAGE sql IMMUTABLE STRICT;
+
+CREATE CAST (oidvector AS regtype[]) WITH FUNCTION oidvregtype(oidvector) AS ASSIGNMENT;
+
+-- Cast int2vector to int[] like 8.1 does.
+CREATE OR REPLACE FUNCTION int2vint(int2vector)
+RETURNS int[] AS
+'SELECT COALESCE(string_to_array(textin(int2vectorout($1::int2vector)), '' '')::int[], ''{}''::int[]);'
+LANGUAGE sql IMMUTABLE STRICT;
+
+CREATE CAST (int2vector AS int[]) WITH FUNCTION int2vint(int2vector) AS ASSIGNMENT;
+
+CREATE OR REPLACE FUNCTION pg_typeof("any")
+RETURNS regtype
+AS '$libdir/pgtap'
+LANGUAGE C STABLE;
+
 CREATE OR REPLACE FUNCTION pg_version_num()
 RETURNS integer AS $$
     SELECT s.a[1]::int * 10000
@@ -91,53 +112,63 @@
 CREATE OR REPLACE FUNCTION _get ( text )
 RETURNS integer AS $$
 DECLARE
-    ret integer;
+    rec RECORD;
 BEGIN
-    EXECUTE 'SELECT value FROM __tcache__ WHERE label = ' || quote_literal($1) || ' LIMIT 1' INTO ret;
-    RETURN ret;
+    FOR rec IN EXECUTE 'SELECT value FROM __tcache__ WHERE label = ' || quote_literal($1) || ' LIMIT 1' LOOP
+        RETURN rec.value;
+    END LOOP;
+    RETURN NULL;
 END;
 $$ LANGUAGE plpgsql strict;
 
 CREATE OR REPLACE FUNCTION _get_latest ( text )
 RETURNS integer[] AS $$
 DECLARE
-    ret integer[];
+    rec RECORD;
 BEGIN
-    EXECUTE 'SELECT ARRAY[ id, value] FROM __tcache__ WHERE label = ' ||
+    FOR rec IN EXECUTE 'SELECT ARRAY[ id, value] AS a FROM __tcache__ WHERE label = ' ||
     quote_literal($1) || ' AND id = (SELECT MAX(id) FROM __tcache__ WHERE label = ' ||
-    quote_literal($1) || ') LIMIT 1' INTO ret;
-    RETURN ret;
+    quote_literal($1) || ') LIMIT 1' LOOP
+        RETURN rec.a;
+    END LOOP;
+    RETURN NULL;
 END;
 $$ LANGUAGE plpgsql strict;
 
 CREATE OR REPLACE FUNCTION _get_latest ( text, integer )
 RETURNS integer AS $$
 DECLARE
-    ret integer;
+    rec RECORD;
 BEGIN
-    EXECUTE 'SELECT MAX(id) FROM __tcache__ WHERE label = ' ||
-    quote_literal($1) || ' AND value = ' || $2 INTO ret;
-    RETURN ret;
+    FOR rec IN EXECUTE 'SELECT MAX(id) AS id FROM __tcache__ WHERE label = ' ||
+    quote_literal($1) || ' AND value = ' || $2 LOOP
+        RETURN rec.id;
+    END LOOP;
+    RETURN;
 END;
 $$ LANGUAGE plpgsql strict;
 
 CREATE OR REPLACE FUNCTION _get_note ( text )
 RETURNS text AS $$
 DECLARE
-    ret text;
+    rec RECORD;
 BEGIN
-    EXECUTE 'SELECT note FROM __tcache__ WHERE label = ' || quote_literal($1) || ' LIMIT 1' INTO ret;
-    RETURN ret;
+    FOR rec IN EXECUTE 'SELECT note FROM __tcache__ WHERE label = ' || quote_literal($1) || ' LIMIT 1' LOOP
+        RETURN rec.note;
+    END LOOP;
+    RETURN;
 END;
 $$ LANGUAGE plpgsql strict;
 
 CREATE OR REPLACE FUNCTION _get_note ( integer )
 RETURNS text AS $$
 DECLARE
-    ret text;
+    rec RECORD;
 BEGIN
-    EXECUTE 'SELECT note FROM __tcache__ WHERE id = ' || $1 || ' LIMIT 1' INTO ret;
-    RETURN ret;
+    FOR rec IN EXECUTE 'SELECT note FROM __tcache__ WHERE id = ' || $1 || ' LIMIT 1' LOOP
+        RETURN rec.note;
+    END LOOP;
+    RETURN;
 END;
 $$ LANGUAGE plpgsql strict;
 
@@ -189,11 +220,11 @@
 RETURNS integer AS $$
 BEGIN
     EXECUTE 'INSERT INTO __tresults__ ( ok, aok, descr, type, reason )
-    VALUES( ' || $1 || ', '
-              || $2 || ', '
-              || quote_literal(COALESCE($3, '')) || ', '
-              || quote_literal($4) || ', '
-              || quote_literal($5) || ' )';
+    VALUES( ' || $1::text || ', '
+              || $2::text || ', '
+              || quote_literal(COALESCE($3, '')::text) || ', '
+              || quote_literal($4::text) || ', '
+              || quote_literal($5::text) || ' )';
     RETURN currval('__tresults___numb_seq');
 END;
 $$ LANGUAGE plpgsql;
@@ -201,10 +232,12 @@
 CREATE OR REPLACE FUNCTION num_failed ()
 RETURNS INTEGER AS $$
 DECLARE
-    ret integer;
+    rec RECORD;
 BEGIN
-    EXECUTE 'SELECT COUNT(*)::INTEGER FROM __tresults__ WHERE ok = FALSE' INTO ret;
-    RETURN ret;
+    FOR rec IN EXECUTE 'SELECT COUNT(*)::INTEGER AS cnt FROM __tresults__ WHERE ok = FALSE' LOOP
+        RETURN rec.cnt;
+    END LOOP;
+    RETURN;
 END;
 $$ LANGUAGE plpgsql strict;
 
@@ -478,13 +511,16 @@
     want   ALIAS FOR $3;
     descr  ALIAS FOR $4;
     result BOOLEAN;
+    rec    RECORD;
     output TEXT;
 BEGIN
-    EXECUTE 'SELECT ' ||
-            COALESCE(quote_literal( have ), 'NULL') || '::' || pg_typeof(have) || ' '
+   FOR rec IN EXECUTE 'SELECT ' ||
+            COALESCE(quote_literal( have ), 'NULL') || '::' || pg_typeof(have)::text || ' '
             || op || ' ' ||
-            COALESCE(quote_literal( want ), 'NULL') || '::' || pg_typeof(want)
-       INTO result;
+            COALESCE(quote_literal( want ), 'NULL') || '::' || pg_typeof(want)::text || ' AS res'
+    LOOP
+        result := rec.res;
+    END LOOP;
     output := ok( COALESCE(result, FALSE), descr );
     RETURN output || CASE result WHEN TRUE THEN '' ELSE '\n' || diag(
            '    ' || COALESCE( quote_literal(have), 'NULL' ) ||
@@ -1232,19 +1268,21 @@
 CREATE OR REPLACE FUNCTION _def_is( TEXT, TEXT, anyelement, TEXT )
 RETURNS TEXT AS $$
 DECLARE
-    thing text;
+    ret RECORD;
 BEGIN
     IF $1 ~ '^[^'']+[(]' THEN
         -- It's a functional default.
         RETURN is( $1, $3, $4 );
     END IF;
 
-    EXECUTE 'SELECT is('
+    FOR ret IN EXECUTE 'SELECT is(' 
              || COALESCE($1, 'NULL' || '::' || $2) || '::' || $2 || ', '
              || COALESCE(quote_literal($3), 'NULL') || '::' || $2 || ', '
              || COALESCE(quote_literal($4), 'NULL')
-    || ')' INTO thing;
-    RETURN thing;
+    || ') AS a' LOOP
+        RETURN ret.a;
+    END LOOP;
+    RETURN;
 END;
 $$ LANGUAGE plpgsql;
 
@@ -3293,96 +3331,6 @@
     SELECT ok( NOT _has_type( $1, ARRAY['e'] ), ('Enum ' || quote_ident($1) || ' should not exist')::text );
 $$ LANGUAGE sql;
 
--- enum_has_labels( schema, enum, labels, description )
-CREATE OR REPLACE FUNCTION enum_has_labels( NAME, NAME, NAME[], TEXT )
-RETURNS TEXT AS $$
-    SELECT is(
-        ARRAY(
-            SELECT e.enumlabel
-              FROM pg_catalog.pg_type t
-              JOIN pg_catalog.pg_enum e      ON t.oid = e.enumtypid
-              JOIN pg_catalog.pg_namespace n ON t.typnamespace = n.oid
-              WHERE t.typisdefined
-               AND n.nspname = $1
-               AND t.typname = $2
-               AND t.typtype = 'e'
-             ORDER BY e.oid
-        ),
-        $3,
-        $4
-    );
-$$ LANGUAGE sql;
-
--- enum_has_labels( schema, enum, labels )
-CREATE OR REPLACE FUNCTION enum_has_labels( NAME, NAME, NAME[] )
-RETURNS TEXT AS $$
-    SELECT enum_has_labels(
-        $1, $2, $3,
-        'Enum ' || quote_ident($1) || '.' || quote_ident($2) || ' should have labels (' || array_to_string( $3, ', ' ) || ')'
-    );
-$$ LANGUAGE sql;
-
--- enum_has_labels( enum, labels, description )
-CREATE OR REPLACE FUNCTION enum_has_labels( NAME, NAME[], TEXT )
-RETURNS TEXT AS $$
-    SELECT is(
-        ARRAY(
-            SELECT e.enumlabel
-              FROM pg_catalog.pg_type t
-              JOIN pg_catalog.pg_enum e ON t.oid = e.enumtypid
-              WHERE t.typisdefined
-               AND pg_catalog.pg_type_is_visible(t.oid)
-               AND t.typname = $1
-               AND t.typtype = 'e'
-             ORDER BY e.oid
-        ),
-        $2,
-        $3
-    );
-$$ LANGUAGE sql;
-
--- enum_has_labels( enum, labels )
-CREATE OR REPLACE FUNCTION enum_has_labels( NAME, NAME[] )
-RETURNS TEXT AS $$
-    SELECT enum_has_labels(
-        $1, $2,
-        'Enum ' || quote_ident($1) || ' should have labels (' || array_to_string( $2, ', ' ) || ')'
-    );
-$$ LANGUAGE sql;
-
-CREATE OR REPLACE FUNCTION _has_role( NAME )
-RETURNS BOOLEAN AS $$
-    SELECT EXISTS(
-        SELECT true
-          FROM pg_catalog.pg_roles
-         WHERE rolname = $1
-    );
-$$ LANGUAGE sql STRICT;
-
--- has_role( role, description )
-CREATE OR REPLACE FUNCTION has_role( NAME, TEXT )
-RETURNS TEXT AS $$
-    SELECT ok( _has_role($1), $2 );
-$$ LANGUAGE sql;
-
--- has_role( role )
-CREATE OR REPLACE FUNCTION has_role( NAME )
-RETURNS TEXT AS $$
-    SELECT ok( _has_role($1), 'Role ' || quote_ident($1) || ' should exist' );
-$$ LANGUAGE sql;
-
--- hasnt_role( role, description )
-CREATE OR REPLACE FUNCTION hasnt_role( NAME, TEXT )
-RETURNS TEXT AS $$
-    SELECT ok( NOT _has_role($1), $2 );
-$$ LANGUAGE sql;
-
--- hasnt_role( role )
-CREATE OR REPLACE FUNCTION hasnt_role( NAME )
-RETURNS TEXT AS $$
-    SELECT ok( NOT _has_role($1), 'Role ' || quote_ident($1) || ' should not exist' );
-$$ LANGUAGE sql;
-
 CREATE OR REPLACE FUNCTION _is_super( NAME )
 RETURNS BOOLEAN AS $$
     SELECT usesuper
@@ -3486,7 +3434,7 @@
 $$ LANGUAGE sql;
 
 CREATE OR REPLACE FUNCTION _grolist ( NAME )
-RETURNS oid[] AS $$
+RETURNS integer[] AS $$
     SELECT grolist FROM pg_catalog.pg_group WHERE groname = $1;
 $$ LANGUAGE sql;
 
@@ -5447,6 +5395,7 @@
     res     BOOLEAN;
     descr   TEXT;
     adiag   TEXT;
+    rec     RECORD;
     have    ALIAS FOR $1;
     eok     ALIAS FOR $2;
     name    ALIAS FOR $3;
@@ -5458,8 +5407,10 @@
     tnumb := currval('__tresults___numb_seq');
 
     -- Fetch the results.
-    EXECUTE 'SELECT aok, descr FROM __tresults__ WHERE numb = ' || tnumb
-       INTO aok, adescr;
+    FOR rec IN EXECUTE 'SELECT aok, descr FROM __tresults__ WHERE numb = ' || tnumb LOOP
+        aok := rec.aok;
+        adescr := rec.descr;
+    END LOOP;
 
     -- Now delete those results.
     EXECUTE 'DELETE FROM __tresults__ WHERE numb = ' || tnumb;
@@ -5582,7 +5533,7 @@
 CREATE OR REPLACE FUNCTION _runem( text[], boolean )
 RETURNS SETOF TEXT AS $$
 DECLARE
-    tap    text;
+    rec    record;
     lbound int := array_lower($1, 1);
 BEGIN
     IF lbound IS NULL THEN RETURN; END IF;
@@ -5590,8 +5541,8 @@
         -- Send the name of the function to diag if warranted.
         IF $2 THEN RETURN NEXT diag( $1[i] || '()' ); END IF;
         -- Execute the tap function and return its results.
-        FOR tap IN EXECUTE 'SELECT * FROM ' || $1[i] || '()' LOOP
-            RETURN NEXT tap;
+        FOR rec IN EXECUTE 'SELECT * FROM ' || $1[i] || '() AS b(a)' LOOP
+            RETURN NEXT rec.a;
         END LOOP;
     END LOOP;
     RETURN;
@@ -5651,116 +5602,6 @@
 END
 $$ LANGUAGE plpgsql;
 
-CREATE OR REPLACE FUNCTION _runner( text[], text[], text[], text[], text[] )
-RETURNS SETOF TEXT AS $$
-DECLARE
-    startup  ALIAS FOR $1;
-    shutdown ALIAS FOR $2;
-    setup    ALIAS FOR $3;
-    teardown ALIAS FOR $4;
-    tests    ALIAS FOR $5;
-    tap      text;
-    verbose  boolean := _is_verbose();
-    num_faild INTEGER := 0;
-BEGIN
-    BEGIN
-        -- No plan support.
-        PERFORM * FROM no_plan();
-        FOR tap IN SELECT * FROM _runem(startup, false) LOOP RETURN NEXT tap; END LOOP;
-    EXCEPTION
-        -- Catch all exceptions and simply rethrow custom exceptions. This
-        -- will roll back everything in the above block.
-        WHEN raise_exception THEN
-            RAISE EXCEPTION '%', SQLERRM;
-    END;
-
-    BEGIN
-        FOR i IN 1..array_upper(tests, 1) LOOP
-            BEGIN
-                -- What test are we running?
-                IF verbose THEN RETURN NEXT diag(tests[i] || '()'); END IF;
-
-                -- Run the setup functions.
-                FOR tap IN SELECT * FROM _runem(setup, false) LOOP RETURN NEXT tap; END LOOP;
-
-                -- Run the actual test function.
-                FOR tap IN EXECUTE 'SELECT * FROM ' || tests[i] || '()' LOOP
-                    RETURN NEXT tap;
-                END LOOP;
-
-                -- Run the teardown functions.
-                FOR tap IN SELECT * FROM _runem(teardown, false) LOOP RETURN NEXT tap; END LOOP;
-
-                -- Remember how many failed and then roll back.
-                num_faild := num_faild + num_failed();
-                RAISE EXCEPTION '__TAP_ROLLBACK__';
-
-            EXCEPTION WHEN raise_exception THEN
-                IF SQLERRM <> '__TAP_ROLLBACK__' THEN
-                    -- We didn't raise it, so propagate it.
-                    RAISE EXCEPTION '%', SQLERRM;
-                END IF;
-            END;
-        END LOOP;
-
-        -- Run the shutdown functions.
-        FOR tap IN SELECT * FROM _runem(shutdown, false) LOOP RETURN NEXT tap; END LOOP;
-
-        -- Raise an exception to rollback any changes.
-        RAISE EXCEPTION '__TAP_ROLLBACK__';
-    EXCEPTION WHEN raise_exception THEN
-        IF SQLERRM <> '__TAP_ROLLBACK__' THEN
-            -- We didn't raise it, so propagate it.
-            RAISE EXCEPTION '%', SQLERRM;
-        END IF;
-    END;
-    -- Finish up.
-    FOR tap IN SELECT * FROM _finish( currval('__tresults___numb_seq')::integer, 0, num_faild ) LOOP
-        RETURN NEXT tap;
-    END LOOP;
-
-    -- Clean up and return.
-    PERFORM _cleanup();
-    RETURN;
-END;
-$$ LANGUAGE plpgsql;
-
--- runtests( schema, match )
-CREATE OR REPLACE FUNCTION runtests( NAME, TEXT )
-RETURNS SETOF TEXT AS $$
-    SELECT * FROM _runner(
-        findfuncs( $1, '^startup' ),
-        findfuncs( $1, '^shutdown' ),
-        findfuncs( $1, '^setup' ),
-        findfuncs( $1, '^teardown' ),
-        findfuncs( $1, $2 )
-    );
-$$ LANGUAGE sql;
-
--- runtests( schema )
-CREATE OR REPLACE FUNCTION runtests( NAME )
-RETURNS SETOF TEXT AS $$
-    SELECT * FROM runtests( $1, '^test' );
-$$ LANGUAGE sql;
-
--- runtests( match )
-CREATE OR REPLACE FUNCTION runtests( TEXT )
-RETURNS SETOF TEXT AS $$
-    SELECT * FROM _runner(
-        findfuncs( '^startup' ),
-        findfuncs( '^shutdown' ),
-        findfuncs( '^setup' ),
-        findfuncs( '^teardown' ),
-        findfuncs( $1 )
-    );
-$$ LANGUAGE sql;
-
--- runtests( )
-CREATE OR REPLACE FUNCTION runtests( )
-RETURNS SETOF TEXT AS $$
-    SELECT * FROM runtests( '^test' );
-$$ LANGUAGE sql;
-
 CREATE OR REPLACE FUNCTION _temptable ( TEXT, TEXT )
 RETURNS TEXT AS $$
 BEGIN
@@ -5786,8 +5627,9 @@
         SELECT pg_catalog.format_type(a.atttypid, a.atttypmod)
           FROM pg_catalog.pg_attribute a
           JOIN pg_catalog.pg_class c ON a.attrelid = c.oid
+          JOIN pg_catalog.pg_namespace n ON c.relnamespace = n.oid
          WHERE c.relname = $1
-           AND c.relistemp
+           AND n.nspname LIKE 'pg_temp%'
            AND attnum > 0
            AND CASE WHEN attisdropped THEN false ELSE pg_type_is_visible(a.atttypid) END
          ORDER BY attnum
@@ -5809,13 +5651,13 @@
         -- Find extra records.
         FOR rec in EXECUTE 'SELECT * FROM ' || have || ' EXCEPT ' || $4
                         || 'SELECT * FROM ' || want LOOP
-            extras := extras || rec::text;
+            extras := array_append(extras, textin(record_out(rec, 2249)));
         END LOOP;
 
         -- Find missing records.
         FOR rec in EXECUTE 'SELECT * FROM ' || want || ' EXCEPT ' || $4
                         || 'SELECT * FROM ' || have LOOP
-            missing := missing || rec::text;
+            missing := array_append(missing, textin(record_out(rec, 2249)));
         END LOOP;
 
         -- Drop the temporary tables.
@@ -5929,16 +5771,20 @@
     missing TEXT[]  := '{}';
     res     BOOLEAN := TRUE;
     msg     TEXT    := '';
+    rec     RECORD;
 BEGIN
     BEGIN
         -- Find extra records.
-        EXECUTE 'SELECT EXISTS ( '
+        FOR rec IN EXECUTE 'SELECT EXISTS ( '
              || '( SELECT * FROM ' || have || ' EXCEPT ' || $4
              || '  SELECT * FROM ' || want
              || ' ) UNION ( '
              || '  SELECT * FROM ' || want || ' EXCEPT ' || $4
              || '  SELECT * FROM ' || have
-             || ' ) LIMIT 1 )' INTO res;
+             || ' ) LIMIT 1 ) AS a'
+        LOOP
+            res := rec.a;
+        END LOOP;
 
         -- Drop the temporary tables.
         EXECUTE 'DROP TABLE ' || have;
@@ -6039,7 +5885,7 @@
         -- Find relevant records.
         FOR rec in EXECUTE 'SELECT * FROM ' || want || ' ' || $4
                        || ' SELECT * FROM ' || have LOOP
-            results := results || rec::text;
+            results := array_append(results, textin(record_out(rec, 2249)));
         END LOOP;
 
         -- Drop the temporary tables.
@@ -6134,11 +5980,11 @@
     FETCH want INTO want_rec;
     want_found := FOUND;
     WHILE have_found OR want_found LOOP
-        IF have_rec IS DISTINCT FROM want_rec OR have_found <> want_found THEN
+        IF textin(record_out(have_rec, 2249)) IS DISTINCT FROM textin(record_out(want_rec, 2249)) OR have_found <> want_found THEN
             RETURN ok( false, $3 ) || '\n' || diag(
                 '    Results differ beginning at row ' || rownum || ':\n' ||
-                '        have: ' || CASE WHEN have_found THEN have_rec::text ELSE 'NULL' END || '\n' ||
-                '        want: ' || CASE WHEN want_found THEN want_rec::text ELSE 'NULL' END
+                '        have: ' || CASE WHEN have_found THEN textin(record_out(have_rec, 2249)) ELSE 'NULL' END || '\n' ||
+                '        want: ' || CASE WHEN want_found THEN textin(record_out(want_rec, 2249)) ELSE 'NULL' END
             );
         END IF;
         rownum = rownum + 1;
@@ -6153,8 +5999,8 @@
     WHEN datatype_mismatch THEN
         RETURN ok( false, $3 ) || '\n' || diag(
             '    Columns differ between queries:\n' ||
-            '        have: ' || CASE WHEN have_found THEN have_rec::text ELSE 'NULL' END || '\n' ||
-            '        want: ' || CASE WHEN want_found THEN want_rec::text ELSE 'NULL' END
+            '        have: ' || CASE WHEN have_found THEN textin(record_out(have_rec, 2249)) ELSE 'NULL' END || '\n' ||
+            '        want: ' || CASE WHEN want_found THEN textin(record_out(want_rec, 2249)) ELSE 'NULL' END
         );
 END;
 $$ LANGUAGE plpgsql;
@@ -6289,7 +6135,7 @@
     FETCH want INTO want_rec;
     want_found := FOUND;
     WHILE have_found OR want_found LOOP
-        IF have_rec IS DISTINCT FROM want_rec OR have_found <> want_found THEN
+        IF textin(record_out(have_rec, 2249)) IS DISTINCT FROM textin(record_out(want_rec, 2249)) OR have_found <> want_found THEN
             RETURN ok( true, $3 );
         ELSE
             FETCH have INTO have_rec;
@@ -6303,8 +6149,8 @@
     WHEN datatype_mismatch THEN
         RETURN ok( false, $3 ) || '\n' || diag(
             '    Columns differ between queries:\n' ||
-            '        have: ' || CASE WHEN have_found THEN have_rec::text ELSE 'NULL' END || '\n' ||
-            '        want: ' || CASE WHEN want_found THEN want_rec::text ELSE 'NULL' END
+            '        have: ' || CASE WHEN have_found THEN textin(record_out(have_rec, 2249)) ELSE 'NULL' END || '\n' ||
+            '        want: ' || CASE WHEN want_found THEN textin(record_out(want_rec, 2249)) ELSE 'NULL' END
         );
 END;
 $$ LANGUAGE plpgsql;
